@page "/"
@using BlazorDungeon.Data
@using BlazorDungeon.Service

@inject ScreenChangeBroadcastService ScreenChangeBroadcastService;
@inject StateManager StateManager;

<pre tabindex="0" @onkeydown="OnKeyDownScreen" @onkeyup="OnKeyUpScreen">@if(rows!=null)foreach (var row in rows){
    foreach (var cell in row.Cells){<span class="@cell.cssClass">@cell.character</span>}@Environment.NewLine
}
</pre>
<div>
    @if (sounds != null && sounds.Count > 0)
    {
        if (sounds[0])
        {
            <audio autoplay><source src="./sounds/death.mp3" /></audio>
        }
        if (sounds[1])
        {
            <audio autoplay><source src="./sounds/coin.mp3" /></audio>
        }
        if (sounds[2])
        {
            <audio autoplay><source src="./sounds/cherrie.mp3" /></audio>
        }
        if (sounds[3])
        {
            <audio autoplay><source src="./sounds/redapple.mp3" /></audio>
        }
        if (sounds[4])
        {
            <audio autoplay><source src="./sounds/greenapple.mp3" /></audio>
        }
        if (sounds[5])
        {
            <audio autoplay><source src="./sounds/strawberry.mp3" /></audio>
        }
    }
</div>
@code{

    private IList<Row> rows;
    private IList<bool> sounds;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.ScreenChangeBroadcastService.OnScreenChanged += this.ScreenChanged;
            StateManager.Initialize(ScreenChangeBroadcastService.game);
            this.rows = this.ScreenChangeBroadcastService.GetCurrentValues(StateManager.Id);
            this.sounds = this.ScreenChangeBroadcastService.GetCurrentValuesSounds(StateManager.Id);
        }
    }

    private async void ScreenChanged(object sender, ScreenChangeEventArgs args)
    {
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private async Task OnKeyDownScreen(KeyboardEventArgs e)
    {
        this.ScreenChangeBroadcastService.KeyDown(e.Key, StateManager.Id);
    }

    private async Task OnKeyUpScreen(KeyboardEventArgs e)
    {
        this.ScreenChangeBroadcastService.KeyUp(e.Key, StateManager.Id);
    }

    public void Dispose()
    {
        this.ScreenChangeBroadcastService.OnScreenChanged -= this.ScreenChanged;
    }
}